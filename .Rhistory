library("ggplot")
library("ggplot2")
BCG_plot <- ggplot(data = BCG) +
aes(x = OR, y = year) +
geom_line()
force(birthwt)
BCG_plot <- ggplot(data = BCG, aes(x = OR, y = year)) +
geom_line() +
geom_point() +
labs(title = "OR vs year", x = "OR", y = "Year")
BCG_plot
BCG_plot
BCG_plot <- ggplot(data = BCG, aes(x = OR, y = Year)) +
geom_line() +
geom_point() +
labs(title = "OR vs year", x = "OR", y = "Year")
BCG_plot
BCG_plot <- ggplot(data = BCG, aes(x = Year, y = OR)) +
geom_line() +
geom_point() +
labs(title = "OR vs year", x = "Year", y = "OR")
BCG_plot
BCG_plot <- ggplot(data = BCG, aes(x = Year, y = OR)) +
geom_point() +
labs(title = "OR vs year", x = "Year", y = "OR")
BCG_plot
BCG_plot <- ggplot(data = BCG, aes(x = Year, y = OR)) +
geom_point() +
labs(title = "OR of TB after BCG vaccination by Year", x = "Year", y = "OR")
BCG_plot
BCG_plot_OR <- ggplot(data = BCG, aes(x = Study, y = OR)) +
geom_bar(stat="identity") +
labs(title = "OR of TB after BCG vaccination by Study", x = "Study", y = "OR")
BCG_plot_OR <- ggplot(data = BCG, aes(x = Study, y = OR)) +
geom_bar(stat="identity") +
labs(title = "OR of TB after BCG vaccination by Study", x = "Study", y = "OR")
BCG_plot_OR
BCG_plot_year <- ggplot(data = BCG, aes(x = Year, y = OR)) +
geom_bar(stat="identity") +
labs(title = "OR of TB after BCG vaccination by Year", x = "Year", y = "Odds Ratio")
BCG_plot_year
# Low Birth Wei
BCG_plot_year <- ggplot(data = BCG, aes(x = Year, y = OR)) +
geom_point() +
labs(title = "OR of TB after BCG vaccination by Year", x = "Year", y = "Odds Ratio")
BCG_plot_year
BCG_plot_lat <- ggplot(data = BCG, aes(x = Latitude, y = OR)) +
geom_point() +
labs(title = "OR of TB after BCG vaccination by Latitude", x = "Latitude", y = "Odds Ratio")
BCG_plot_lat
BCG_plot_year
BCG_plot_lat
BCG <- BCG %>%
mutate(RR = (BCGTB / BCGVAcc) / (NoVaccTB / NoVacc))
BCG <- BCG %>%
mutate(RR = (BCGTB / BCGVacc) / (NoVaccTB / NoVacc))
BCG_plot_rr_or <- ggplot(data = BCG, aes(x = RR, y = OR)) +
geom_point() +
labs(title = "OR vs RR of TB after BCG vaccination by Latitude", x = "Relative Risk", y = "Odds Ratio")
BCG_plot_rr_or
ht_odds_ratio
# Script in which you should do your analysis described on Canvas
library("HSAUR")
library("MASS")
library("Epi")
library("dplyr")
library("ggplot2")
library("tidyverse")
library("epitools")
library("rlang")
library("patchwork")
# Tuberculosis
# https://cran.r-project.org/web/packages/HSAUR/HSAUR.pdf
# odds ratio
data("BCG")
# BCGTB number of subjects suffering from TB after BCG vaccination
# BCGVacc the number of subjects with BCG vaccination.
# NoVaccTB the number of subjects suffering from TB without BCG vaccination.
# NoVacc the total number of subjects without BCG vaccination.
# Latitude geographic position of the place the study was undertaken.
# Year the year the study was undertaken.
# new columns
BCG <- BCG %>%
mutate(
BCGnoTB = BCGVacc - BCGTB,
NoVaccNoTB = NoVacc - NoVaccTB
)
# Odds Ratio
BCG <- BCG %>%
mutate(
OR = (BCGTB * NoVaccNoTB) / (BCGnoTB * NoVaccTB)
)
# visualization
BCG_plot_OR <- ggplot(data = BCG, aes(x = Study, y = OR)) +
geom_bar(stat="identity") +
labs(title = "OR of TB after BCG vaccination by Study", x = "Study", y = "Odds Ratio")
BCG_plot_OR
BCG_plot_year <- ggplot(data = BCG, aes(x = Year, y = OR)) +
geom_point() +
labs(title = "OR of TB after BCG vaccination by Year", x = "Year", y = "Odds Ratio")
BCG_plot_year
BCG_plot_lat <- ggplot(data = BCG, aes(x = Latitude, y = OR)) +
geom_point() +
labs(title = "OR of TB after BCG vaccination by Latitude", x = "Latitude", y = "Odds Ratio")
BCG_plot_lat
# analysis: Except for some exceptions, it seems like the BCG vaccine is quite
# effective in reducing the odds of TB. While there are some higher ORs in some of the studies,
# looking at it by year, it can be seen that the OR increases over time, suggesting a decrease in the effectivenss
# of the vaccine over the years. This may be attributed to a decrease in vaccine efficacy over time
# with lower antibody levels. Higher latitudes also seem to have lower ORs, possibly suggesting where
# you are matters on how effective the vaccine is in protecting you. For example, a place with higher
# incidence of TB will have a harder time protecting you from it compared to a place with low incidence.
BCG <- BCG %>%
mutate(RR = (BCGTB / BCGVacc) / (NoVaccTB / NoVacc))
BCG_plot_rr_or <- ggplot(data = BCG, aes(x = RR, y = OR)) +
geom_point() +
labs(title = "OR vs RR of TB after BCG vaccination by Latitude", x = "Relative Risk", y = "Odds Ratio")
BCG_plot_rr_or
BCG_plots1 <- BCG_plot_OR + BCG_plot_rr_or
BCG_plots2 <- BCG_plot_year + BCG_plot_lat
# The relative risk and the odds ratio seem to be very similar when compared to each other.
# Low Birth Weight
# binary
# relative risk
data("birthwt")
prop_smoker <- sum(birthwt$smoke == 1) / nrow(birthwt)
prop_lbwt <- sum(birthwt$low == 1) / nrow(birthwt)
prop_ht <- sum(birthwt$ht == 1) / nrow(birthwt)
mean_bwt <- mean(birthwt$bwt)
binary_rr <- function(df, column) {
col_pos = sum(df[, column] == 1)
col_neg = sum(df[, column] == 0)
col_pos_low_weight = sum(df$low == 1 & df[, column] == 1)
col_neg_low_weight = sum(df$low == 1 & df[, column] == 0)
exp = col_pos_low_weight / col_pos
no_exp = col_neg_low_weight / col_neg
RR = exp / no_exp
return(RR)
}
smoke_rr <- binary_rr(birthwt, "smoke")
ht_rr <- binary_rr(birthwt, "ht")
birthwt <- birthwt %>%
mutate(
zero_visits = ifelse(birthwt$ftv<1,"1","0")
)
zero_visits_rr <- binary_rr(birthwt, "zero_visits")
birthwt <- birthwt %>%
mutate(
age_twenty = ifelse(birthwt$age < 20,"1","0")
)
twenty_rr <- binary_rr(birthwt, "age_twenty")
df <- data.frame(smoke_rr, ht_rr, zero_visits_rr, twenty_rr)
df <- df %>%
rename(
"Smoking"= smoke_rr,
"Hypertension"= ht_rr,
"Zero Prenatal Visits" = zero_visits_rr,
"Before Age of 20" = twenty_rr
)
# The analysis suggests that mothers who are smokers, have zero prenatal visits,
# and have history of hypertension have higher risk of having a baby with low birth weight
# Meanwhile, mothers who are under the age of twenty have slightly lower risk of having a baby
# with a low birth weight. Those with hypertension seems to have the highest risk of having a low
# birth weight child.
# use kable to create table in rmd
# Endometrial Cancer
# use method = oddsratio
# use matrix
data("bdendo")
matrix_create <- function(df, col) {
disease_pos_ct <- df %>%
filter(d == 1, !!as.name(col) == "Yes") %>%
nrow()
print(disease_pos_ct)
non_disease_pos_ct <- df %>%
filter(d == 0, !!as.name(col) == "Yes") %>%
nrow()
disease_neg_ct <- df %>%
filter(d == 1, !!as.name(col) == "No") %>%
nrow()
non_disease_neg_ct <- df %>%
filter(d == 0, !!as.name(col) == "No") %>%
nrow()
input <- matrix(c(disease_pos_ct, non_disease_pos_ct, disease_neg_ct, non_disease_neg_ct), 2, 2)
return(input)
}
ht_matrix <- matrix_create(bdendo, "hyp")
gall_matrix <- matrix_create(bdendo, "gall")
ob_matrix <- matrix_create(bdendo, "ob")
ht_odds_ratio <- epitab(ht_matrix, method="oddsratio")
gall_odds_ratio <- epitab(gall_matrix, method="oddsratio")
ob_odds_ratio <- epitab(ob_matrix, method="oddsratio")
ht_odds_ratio
ht_odds_ratio[1]
ht_odds_ratio[1]
ht_odds_ratio[2]
ht_odds_ratio[1]
ob_odds_ratioi[1]
ht_odds_ratio[1]
gall_odds_ratio[1]
ob_odds_ratio[1]
---
title: "index"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
setwd('~/GitHub/478_project')
data <- read.csv('data/us_state_vaccinations.csv')
```
---
title: "index"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
data <- read.csv('data/us_state_vaccinations.csv')
```
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages(c("backports", "BH", "blob", "boot", "brew", "brio", "broom", "bslib", "cachem", "callr", "class", "cli", "clipr", "cluster", "colorspace", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "desc", "devtools", "diffobj", "digest", "dtplyr", "evaluate", "fansi", "foreign", "fs", "future", "gargle", "generics", "gert", "ggplot2", "gh", "glue", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "isoband", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "leaflet", "lubridate", "magrittr", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "processx", "R.cache", "R.utils", "R6", "raster", "rcmdcheck", "readr", "remotes", "reprex", "rex", "rmarkdown", "roxygen2", "rpart", "rsconnect", "rversions", "rvest", "sessioninfo", "shiny", "shinydashboard", "shinyWidgets", "sjlabelled", "sjmisc", "sp", "spatial", "stringi", "styler", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "usethis", "utf8", "uuid", "viridis", "waldo", "withr", "xfun", "xml2", "yaml", "zip"))
install.packages(c("backports", "BH", "blob", "boot", "brew", "brio", "broom", "bslib", "cachem", "callr", "class", "cli", "clipr", "cluster", "colorspace", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "desc", "devtools", "diffobj", "digest", "dtplyr", "evaluate", "fansi", "foreign", "fs", "future", "gargle", "generics", "gert", "ggplot2", "gh", "glue", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "isoband", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "leaflet", "lubridate", "magrittr", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "processx", "R.cache", "R.utils", "R6", "raster", "rcmdcheck", "readr", "remotes", "reprex", "rex", "rmarkdown", "roxygen2", "rpart", "rsconnect", "rversions", "rvest", "sessioninfo", "shiny", "shinydashboard", "shinyWidgets", "sjlabelled", "sjmisc", "sp", "spatial", "stringi", "styler", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "usethis", "utf8", "uuid", "viridis", "waldo", "withr", "xfun", "xml2", "yaml", "zip"))
install.packages(c("backports", "BH", "blob", "boot", "brew", "brio", "broom", "bslib", "cachem", "callr", "class", "cli", "clipr", "cluster", "colorspace", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "desc", "devtools", "diffobj", "digest", "dtplyr", "evaluate", "fansi", "foreign", "fs", "future", "gargle", "generics", "gert", "ggplot2", "gh", "glue", "googledrive", "googlesheets4", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "isoband", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "leaflet", "lubridate", "magrittr", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "processx", "R.cache", "R.utils", "R6", "raster", "rcmdcheck", "readr", "remotes", "reprex", "rex", "rmarkdown", "roxygen2", "rpart", "rsconnect", "rversions", "rvest", "sessioninfo", "shiny", "shinydashboard", "shinyWidgets", "sjlabelled", "sjmisc", "sp", "spatial", "stringi", "styler", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "usethis", "utf8", "uuid", "viridis", "waldo", "withr", "xfun", "xml2", "yaml", "zip"))
install.packages("dplyr")
library(EpiModel)
install.packages("EpiModel", dependencies = TRUE)
library(EpiModel)
install.packages("EpiModel", dependencies = TRUE)
library(EpiModel)
library("EpiModel")
install.packages("EpiModel", dependencies = TRUE)
library("EpiModel")
param <- param.dcm(inf.prob = 0.2, act.rate = 0.25)
# inf. prob = transmission probability per act
# act. rate = acts per person per unit time
init <- init.dcm(s.num = 500, i.num = 1)
# init.dcm collects initial conditions of model
control <- control.dcm(type = "SI", nsteps = 500)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
mod <- dcm(param, init, control)
mod
plot(mod)
param <- param.icm(inf.prob = 0.2, act.rate = 0.25)
init <- init.icm(s.num = 500, i.num = 1)
control <- control.icm(type = "SI", nsims = 10, nsteps = 300)
mod <- icm(param, init, control)
mod
summary(mod, at = 125)
mod
plot(mod)
setwd("~/Desktop/code/INFO 478/a3-tadeusk12")
shiny::runApp()
View(ui)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tab_1 <-
fluidPage(
sidebarLayout(selectInput("select", label = h3("Select box"),
choices = list("Unvaccinated" = 1, "Fully Vaccinated" = 2),
selected = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value"))))
plotOutput("plot1")
)
View(BCG_plot_year)
runApp()
runApp()
runApp()
runApp()
runApp()
# Basic dcms
# https://onlinelibrary.wiley.com/doi/10.1002/jmv.27506
# https://deliverypdf.ssrn.com/delivery.php?ID=013084113099075076081099125108082007125015095067062090018069012096127075064083083110101106016015108127058124113027026107079028047047048048043107065093113123098035086054065108025123107112106109066067006125125106091071067010095118082097084075069021&EXT=pdf&INDEX=TRUE
# inf. prob = transmission probability per act
# act. rate = acts per person per unit time
param <- param.dcm(inf.prob = 0.99, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod1 <- dcm(param, init, control)
library("EpiModel")
server <-  function(input, output) {
# Basic dcms
# https://onlinelibrary.wiley.com/doi/10.1002/jmv.27506
# https://deliverypdf.ssrn.com/delivery.php?ID=013084113099075076081099125108082007125015095067062090018069012096127075064083083110101106016015108127058124113027026107079028047047048048043107065093113123098035086054065108025123107112106109066067006125125106091071067010095118082097084075069021&EXT=pdf&INDEX=TRUE
# inf. prob = transmission probability per act
# act. rate = acts per person per unit time
param <- param.dcm(inf.prob = 0.99, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod1 <- dcm(param, init, control)
mod1
# inf. prob = transmission probability per act
# act. rate = acts per person per unit time
param <- param.dcm(inf.prob = 0.0914, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod12 <- dcm(param, init, control)
mod12
# plot the model
output$plot1 <- renderPlot(plot(input$select))
# SI Model Stochasticity
param <- param.icm(inf.prob = 0.99, act.rate = 0.25)
init <- init.icm(s.num = 500, i.num = 1)
control <- control.icm(type = "SI", nsims = 10, nsteps = 300)
mod2 <- icm(param, init, control)
mod2
summary(mod2, at = 125)
output$plot2 <- renderPlot(plot(mod2))
}
runApp()
mod12 <- dcm(param, init, control)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(tab_3)
View(param)
View(bdendo)
runApp()
runApp()
runApp()
runApp()
runApp()
View(tab_2)
runApp()
library("EpiModel")
server <-  function(input, output) {
# Basic dcms
# https://onlinelibrary.wiley.com/doi/10.1002/jmv.27506
# https://deliverypdf.ssrn.com/delivery.php?ID=013084113099075076081099125108082007125015095067062090018069012096127075064083083110101106016015108127058124113027026107079028047047048048043107065093113123098035086054065108025123107112106109066067006125125106091071067010095118082097084075069021&EXT=pdf&INDEX=TRUE
# inf. prob = transmission probability per act
# act. rate = acts per person per unit time
reactive({
if (input$select == 1){
prob = 0.99
} else {
prob = 0.0914
}
param <- param.dcm(inf.prob = prob, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod1 <- dcm(param, init, control)
mod1
})
# plot the model
output$plot1 <- renderPlot(plot(mod1))
# SI Model Stochasticity
reactive({
if (input$select1 == 1){
prob = 0.99
} else {
prob = 0.0914
}
param <- param.icm(inf.prob = 0.99, act.rate = 0.25)
init <- init.icm(s.num = 500, i.num = 1)
control <- control.icm(type = "SI", nsims = 10, nsteps = 300)
mod2 <- icm(param, init, control)
mod2
summary(mod2, at = 125)
})
output$plot2 <- renderPlot(plot(mod2))
}
runApp()
runApp()
reactive({
if (input$select1 == 1){
prob = 0.99
} else {
prob = 0.0914
}
param <- param.icm(inf.prob = 0.99, act.rate = 0.25)
init <- init.icm(s.num = 500, i.num = 1)
control <- control.icm(type = "SI", nsims = 10, nsteps = 300)
mod2 <- icm(param, init, control)
})
output$plot2 <- renderPlot(plot(mod2))
output$plot2 <- renderPlot(plot(mod2))
runApp()
runApp()
runApp()
runApp()
View(tab_1)
runApp()
View(tab_4)
plot(mod1)
plot(mod1)
runApp()
runApp()
param <- param.dcm(inf.prob = 0.0914, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod <- dcm(param, init, control)
mod
# plot the model
plot(mod)
param <- param.dcm(inf.prob = 0.0914, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod <- dcm(param, init, control)
mod
# plot the model
plot(mod)
setwd("~/Desktop/code/INFO 478/a3-tadeusk12")
library("EpiModel")
# Basic dcms
# https://onlinelibrary.wiley.com/doi/10.1002/jmv.27506
# https://deliverypdf.ssrn.com/delivery.php?ID=013084113099075076081099125108082007125015095067062090018069012096127075064083083110101106016015108127058124113027026107079028047047048048043107065093113123098035086054065108025123107112106109066067006125125106091071067010095118082097084075069021&EXT=pdf&INDEX=TRUE
# inf. prob = transmission probability per act
# act. rate = acts per person per unit time
param <- param.dcm(inf.prob = 0.0914, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod <- dcm(param, init, control)
mod
# plot the model
plot(mod)
library("EpiModel")
# Basic dcms
# https://onlinelibrary.wiley.com/doi/10.1002/jmv.27506
# https://deliverypdf.ssrn.com/delivery.php?ID=013084113099075076081099125108082007125015095067062090018069012096127075064083083110101106016015108127058124113027026107079028047047048048043107065093113123098035086054065108025123107112106109066067006125125106091071067010095118082097084075069021&EXT=pdf&INDEX=TRUE
# inf. prob = transmission probability per act
# act. rate = acts per person per unit time
param <- param.dcm(inf.prob = 0.99, act.rate = 0.25)
# init.dcm collects initial conditions of model
init <- init.dcm(s.num = 5000, i.num = 1)
# control.dcm collects other structural model controls like the
# model type and number of time steps for the simulation
control <- control.dcm(type = "SI", nsteps = 500)
mod <- dcm(param, init, control)
mod
# plot the model
plot(mod)
setwd("~/Desktop/code/INFO 478/a3-tadeusk12")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
View(data)
View(data)
View(data)
View(data)
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
runApp('~/Desktop/code/INFO 478/478_project')
